
33: mpv5.logging.LogConsole: Logging to File: install.log
34: mpv5.Main: Sun Aug 16 18:18:09 CEST 2009
35: mpv5.data.PropertyStore: Adding property: driver = org.apache.derby.jdbc.ClientDriver
36: mpv5.data.PropertyStore: Adding property: url = /home/anti/.yabs
37: mpv5.data.PropertyStore: Adding property: user = 
38: mpv5.data.PropertyStore: Adding property: password = 
39: mpv5.data.PropertyStore: Adding property: dbname = yabs1db
40: mpv5.globals.LocalSettings: Changing property 'dbpath' to: /home/anti/.yabs
41: mpv5.data.PropertyStore: Change property: /home/anti/.yabs for dbpath
42: mpv5.globals.LocalSettings: Changing property 'dbdriver' to: org.apache.derby.jdbc.ClientDriver
43: mpv5.data.PropertyStore: Change property: org.apache.derby.jdbc.ClientDriver for dbdriver
44: mpv5.globals.LocalSettings: Changing property 'dbuser' to: 
45: mpv5.data.PropertyStore: Change property:  for dbuser
46: mpv5.globals.LocalSettings: Changing property 'dbpassword' to: 
47: mpv5.data.PropertyStore: Change property:  for dbpassword
48: mpv5.globals.LocalSettings: Changing property 'dbname' to: yabs1db
49: mpv5.data.PropertyStore: Change property: yabs1db for dbname
50: mpv5.globals.LocalSettings: Changing property 'dbtype' to: single
51: mpv5.data.PropertyStore: Change property: single for dbtype
52: mpv5.db.common.DatabaseConnection: org.apache.derby.jdbc.ClientDriver
53: mpv5.db.common.DatabaseConnection: Datenbankverbindung: jdbc:derby:/home/anti/.yabs/yabs1db;create=true;
54: mpv5.data.PropertyStore: Adding property: dbrowlimit = 0
55: mpv5.data.PropertyStore: Adding property: proxyhost = null
56: mpv5.db.common.QueryHandler: Setting global row limit to: 0
57: mpv5.data.PropertyStore: Adding property: dbautolock = false
58: mpv5.data.PropertyStore: Adding property: scrollpane = null
59: CREATE TABLE groups (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) UNIQUE NOT NULL,description VARCHAR(750) DEFAULT NULL,defaults VARCHAR(250) DEFAULT NULL,groupsids BIGINT DEFAULT 0,dateadded DATE NOT NULL,reserve1 VARCHAR(500) DEFAULT NULL,intaddedby BIGINT DEFAULT 0, hierarchypath VARCHAR(500) DEFAULT NULL, reserve2 VARCHAR(500) DEFAULT NULL, PRIMARY KEY  (ids))
60: CREATE TABLE productgroups (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) UNIQUE NOT NULL,description VARCHAR(750) DEFAULT NULL,defaults VARCHAR(250) DEFAULT NULL,groupsids BIGINT DEFAULT 0, productgroupsids BIGINT DEFAULT 0,dateadded DATE NOT NULL, hierarchypath VARCHAR(500) DEFAULT NULL, reserve1 VARCHAR(500) DEFAULT NULL,intaddedby BIGINT DEFAULT 0, reserve2 VARCHAR(500) DEFAULT NULL, PRIMARY KEY  (ids))
61: CREATE TABLE tax (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250), taxvalue DOUBLE DEFAULT 0,identifier VARCHAR(250) UNIQUE NOT NULL,reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,PRIMARY KEY  (ids))
62: CREATE TABLE history (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250)  NOT NULL, username VARCHAR(250) NOT NULL,dbidentity VARCHAR(25)  NOT NULL, INTitem SMALLINT NOT NULL,groupsids BIGINT DEFAULT 0, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,reserve1 VARCHAR(500) DEFAULT NULL, reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
63: CREATE TABLE countries (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250)  UNIQUE NOT NULL, iso SMALLINT  UNIQUE NOT NULL,groupsids BIGINT DEFAULT 1,reserve1 VARCHAR(500) DEFAULT NULL, reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
64: CREATE TABLE searchindex (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),dbidentity VARCHAR(25) NOT NULL, groupsids BIGINT, rowID BIGINT NOT NULL,text VARCHAR(5000) DEFAULT NULL)
65: CREATE TABLE globalsettings (IDS BIGINT DEFAULT 1, cname VARCHAR(250) UNIQUE NOT NULL, groupsids BIGINT, value VARCHAR(250) NOT NULL)
66: CREATE TABLE contacts (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cnumber VARCHAR(250) UNIQUE DEFAULT NULL, taxnumber VARCHAR(250), title VARCHAR(250) DEFAULT NULL,groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,country VARCHAR(50) DEFAULT NULL, prename VARCHAR(250) DEFAULT NULL, cname VARCHAR(250) DEFAULT NULL, street VARCHAR(250) DEFAULT NULL,zip VARCHAR(50) DEFAULT NULL,city VARCHAR(300) DEFAULT NULL, mainphone VARCHAR(250) DEFAULT NULL,fax VARCHAR(250) DEFAULT NULL,mobilephone VARCHAR(250) DEFAULT NULL,workphone VARCHAR(250) DEFAULT NULL,mailaddress VARCHAR(350) DEFAULT NULL,company VARCHAR(250) DEFAULT NULL, department VARCHAR(250) DEFAULT NULL,website VARCHAR(350) DEFAULT NULL,notes VARCHAR(10000),dateadded DATE NOT NULL,isactive SMALLINT DEFAULT 0,iscustomer SMALLINT DEFAULT 0,ismanufacturer SMALLINT DEFAULT 0,issupplier SMALLINT DEFAULT 0,iscompany SMALLINT DEFAULT 0,ismale SMALLINT DEFAULT 0,isenabled SMALLINT DEFAULT 1,intaddedby BIGINT DEFAULT 0, invisible SMALLINT DEFAULT 0, reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
67: CREATE TABLE users (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) UNIQUE NOT NULL, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1, intdefaultaccount BIGINT DEFAULT 1, compsids BIGINT DEFAULT 0, intdefaultstatus BIGINT DEFAULT 1,fullname VARCHAR(250) NOT NULL, password VARCHAR(250) NOT NULL,laf VARCHAR(50) DEFAULT NULL, locale VARCHAR(50) DEFAULT NULL, defcountry VARCHAR(50) DEFAULT NULL, mail VARCHAR(50) DEFAULT NULL, language VARCHAR(50) DEFAULT NULL, inthighestright SMALLINT DEFAULT 3,isenabled SMALLINT DEFAULT 1,isrgrouped SMALLINT DEFAULT 0,isloggedin SMALLINT DEFAULT 0,datelastlog DATE DEFAULT NULL, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0,reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
68: CREATE TABLE files (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(25) UNIQUE NOT NULL, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,dateadded DATE NOT NULL,data BLOB(5M) NOT NULL,filesize BIGINT NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0,PRIMARY KEY  (ids))
69: CREATE TABLE languages(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) UNIQUE NOT NULL, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,longname VARCHAR(250) UNIQUE NOT NULL, filename VARCHAR(25) NOT NULL REFERENCES files(cname) ON DELETE CASCADE,dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0,reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
70: CREATE TABLE favourites (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, usersids BIGINT REFERENCES users (ids)  ON DELETE CASCADE,groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,itemsids BIGINT NOT NULL,dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0,reserve1 VARCHAR(500) DEFAULT NULL, reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
71: CREATE TABLE accounts(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), intaccountclass SMALLINT DEFAULT 0, cname VARCHAR(250) NOT NULL, description VARCHAR(250) NOT NULL, taxvalue DOUBLE NOT NULL DEFAULT 0, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0, intparentaccount BIGINT DEFAULT 0, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1, invisible SMALLINT DEFAULT 0, intaccounttype SMALLINT NOT NULL, intprofitfid SMALLINT NOT NULL, inttaxfid SMALLINT NOT NULL, inttaxuid SMALLINT NOT NULL, frame VARCHAR(25) NOT NULL, hierarchypath VARCHAR(250) DEFAULT NULL, PRIMARY KEY  (ids))
72: CREATE TABLE items (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, cnumber VARCHAR(250) UNIQUE NOT NULL, description VARCHAR(2500) DEFAULT NULL, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1, defaultaccountsids BIGINT  REFERENCES accounts(ids) DEFAULT 1,contactsids BIGINT REFERENCES contacts(ids)  ON DELETE CASCADE, netvalue DOUBLE DEFAULT 0,taxvalue DOUBLE DEFAULT 0, datetodo DATE DEFAULT NULL, dateend DATE DEFAULT NULL, intreminders INTEGER DEFAULT 0, inttype SMALLINT DEFAULT 0, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0,intstatus SMALLINT DEFAULT 0, hierarchypath VARCHAR(500) DEFAULT NULL, reserve1 VARCHAR(500) DEFAULT NULL, reserve2 VARCHAR(500) DEFAULT NULL, PRIMARY KEY  (ids))
73: CREATE TABLE itemslists (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), description VARCHAR(2500), cname VARCHAR(250), groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1, itemsids BIGINT  REFERENCES items(ids) ON DELETE RESTRICT,dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0,reserve1 VARCHAR(500) DEFAULT NULL, reserve2 VARCHAR(500) DEFAULT NULL, PRIMARY KEY  (ids))
74: CREATE TABLE subitems (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), cname VARCHAR(2500) DEFAULT NULL,itemsids BIGINT REFERENCES items(ids)  ON DELETE CASCADE, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,originalproductsids BIGINT DEFAULT NULL, countvalue DOUBLE DEFAULT 0 NOT NULL, quantityvalue DOUBLE DEFAULT 0 NOT NULL, measure VARCHAR(250) NOT NULL,description VARCHAR(1000) DEFAULT NULL, internalvalue DOUBLE DEFAULT 0, totalnetvalue DOUBLE DEFAULT 0, totalbrutvalue DOUBLE DEFAULT 0, externalvalue DOUBLE DEFAULT 0, taxpercentvalue DOUBLE DEFAULT 0 NOT NULL,datedelivery DATE DEFAULT NULL, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0,reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
75: CREATE TABLE schedule (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,usersids BIGINT REFERENCES users (ids)  ON DELETE CASCADE,itemsids BIGINT REFERENCES items (ids)  ON DELETE CASCADE,nextdate DATE NOT NULL, intervalmonth SMALLINT NOT NULL, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0,reserve1 VARCHAR(500) DEFAULT NULL, reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
76: CREATE TABLE products (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), cname VARCHAR(500) NOT NULL, cnumber VARCHAR(250) UNIQUE NOT NULL , description VARCHAR(500), externalnetvalue DOUBLE DEFAULT 0, internalnetvalue DOUBLE DEFAULT 0, measure VARCHAR(250) NOT NULL, taxids BIGINT REFERENCES tax(ids), manufacturersids BIGINT DEFAULT 0, suppliersids BIGINT DEFAULT 0, groupsids  BIGINT  REFERENCES groups(ids) DEFAULT 1, productgroupsids  BIGINT  REFERENCES productgroups(ids) DEFAULT 1, url VARCHAR(250) DEFAULT NULL,ean VARCHAR(25) DEFAULT NULL, reference VARCHAR(50) DEFAULT NULL,dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0,invisible SMALLINT DEFAULT 0, inttype SMALLINT NOT NULL, defaultimage VARCHAR(30) DEFAULT NULL, reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
77: CREATE TABLE userproperties(IDS BIGINT DEFAULT 1,cname VARCHAR(250) NOT NULL, value VARCHAR(250) NOT NULL, usersids BIGINT NOT NULL, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,invisible SMALLINT DEFAULT 0)
78: CREATE TABLE messages(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(1000) NOT NULL, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,invisible SMALLINT DEFAULT 0, PRIMARY KEY  (ids))
79: CREATE TABLE mails(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(1000) NOT NULL, dateadded DATE NOT NULL,intaddedby BIGINT DEFAULT 0, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,invisible SMALLINT DEFAULT 0, intstatus SMALLINT DEFAULT 0, usersids BIGINT REFERENCES users(ids) ON DELETE CASCADE, mailid VARCHAR(25) UNIQUE NOT NULL , PRIMARY KEY  (ids))
80: CREATE TABLE comps (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1, cname VARCHAR(250) DEFAULT NULL,state VARCHAR(250) DEFAULT NULL,phoneprefix VARCHAR(250) DEFAULT NULL,business VARCHAR(250) DEFAULT NULL,taxadvisor VARCHAR(250) DEFAULT NULL,city  VARCHAR(250) DEFAULT NULL,taxadvjob VARCHAR(250) DEFAULT NULL,street VARCHAR(250) DEFAULT NULL,stb  VARCHAR(250) DEFAULT NULL,email  VARCHAR(250) DEFAULT NULL,name  VARCHAR(250) DEFAULT NULL,zipcode VARCHAR(250) DEFAULT NULL,phone VARCHAR(250) DEFAULT NULL,firstname  VARCHAR(250) DEFAULT NULL,taxauthority VARCHAR(250) DEFAULT NULL,taxnumber VARCHAR(250) DEFAULT NULL,taxadvmandant VARCHAR(250) DEFAULT NULL,dateadded DATE NOT NULL,ismale SMALLINT DEFAULT 0,isenabled SMALLINT DEFAULT 1,intaddedby BIGINT DEFAULT 0, invisible SMALLINT DEFAULT 0, reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
81: CREATE TABLE webshops (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) UNIQUE NOT NULL,description VARCHAR(750) DEFAULT NULL,groupsids BIGINT DEFAULT 0,dateadded DATE NOT NULL,reserve1 VARCHAR(500) DEFAULT NULL,intaddedby BIGINT DEFAULT 0, interval BIGINT DEFAULT 0, url VARCHAR(500) DEFAULT NULL, reserve2 VARCHAR(500) DEFAULT NULL, PRIMARY KEY  (ids))
82: CREATE TABLE wscontactsmapping (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), webshopsids BIGINT REFERENCES webshops(ids), cname VARCHAR(250) UNIQUE NOT NULL, groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,contactsids BIGINT REFERENCES contacts(ids), wscontact VARCHAR(250) NOT NULL,dateadded DATE DEFAULT NULL, intaddedby BIGINT DEFAULT 0, invisible SMALLINT DEFAULT 0, reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
83: CREATE TABLE tablelock (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250), rowID BIGINT NOT NULL, usersids BIGINT REFERENCES users(ids)  ON DELETE CASCADE,reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids), CONSTRAINT one_lock UNIQUE(cname, rowid))
84: CREATE TABLE itemstoaccounts (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), itemsids BIGINT NOT NULL REFERENCES items(ids) ON DELETE CASCADE, accountsids BIGINT REFERENCES accounts(ids)  ON DELETE CASCADE,reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
85: CREATE TABLE messagestoitems (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), itemsids BIGINT NOT NULL REFERENCES items(ids) ON DELETE CASCADE, messagesids BIGINT REFERENCES messages(ids)  ON DELETE CASCADE,reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
86: CREATE TABLE trashbin (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(500), rowID BIGINT NOT NULL, description VARCHAR(2500), deleteme SMALLINT DEFAULT 1, reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
87: CREATE TABLE filestocontacts(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, description VARCHAR(550) DEFAULT NULL, contactsids BIGINT NOT NULL  REFERENCES contacts(ids) ON DELETE CASCADE, filename VARCHAR(25) NOT NULL REFERENCES files(cname) ON DELETE CASCADE, intsize BIGINT DEFAULT 0, mimetype VARCHAR(25) DEFAULT NULL, intaddedby BIGINT DEFAULT 0,dateadded DATE NOT NULL,groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,PRIMARY KEY  (ids))
88: CREATE TABLE filestoitems(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, description VARCHAR(550) DEFAULT NULL, itemsids BIGINT NOT NULL  REFERENCES items(ids) ON DELETE CASCADE,filename VARCHAR(25) NOT NULL REFERENCES files(cname) ON DELETE CASCADE,intsize BIGINT DEFAULT 0, mimetype VARCHAR(25) DEFAULT NULL, intaddedby BIGINT DEFAULT 0,dateadded DATE NOT NULL,groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,PRIMARY KEY  (ids))
89: CREATE TABLE filestoproducts(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, description VARCHAR(550) DEFAULT NULL, productsids BIGINT NOT NULL  REFERENCES products(ids) ON DELETE CASCADE,filename VARCHAR(25) NOT NULL REFERENCES files(cname) ON DELETE CASCADE,intsize BIGINT DEFAULT 0, mimetype VARCHAR(25) DEFAULT NULL, intaddedby BIGINT DEFAULT 0,dateadded DATE NOT NULL,groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,PRIMARY KEY  (ids))
90: CREATE TABLE plugins(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, description VARCHAR(550) DEFAULT NULL,filename VARCHAR(25) NOT NULL REFERENCES files(cname) ON DELETE CASCADE,intaddedby BIGINT DEFAULT 0,dateadded DATE NOT NULL,groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,PRIMARY KEY  (ids))
91: CREATE TABLE pluginstousers(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, usersids BIGINT NOT NULL, pluginsids BIGINT NOT NULL REFERENCES plugins(ids) ON DELETE CASCADE,intaddedby BIGINT DEFAULT 0,dateadded DATE NOT NULL,groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,PRIMARY KEY  (ids))
92: CREATE TABLE formatstousers(IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),cname VARCHAR(250) NOT NULL, usersids BIGINT REFERENCES users(ids) ON DELETE CASCADE, inttype SMALLINT  DEFAULT 0,PRIMARY KEY  (ids))
93: CREATE TABLE addresses (IDS BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),groupsids BIGINT  REFERENCES groups(ids) DEFAULT 1,contactsids BIGINT REFERENCES contacts(ids),title VARCHAR(250) DEFAULT NULL, taxnumber VARCHAR(250),prename VARCHAR(250) DEFAULT NULL, cname VARCHAR(250) DEFAULT NULL, street VARCHAR(250) DEFAULT NULL,zip VARCHAR(50) DEFAULT NULL,city VARCHAR(300) DEFAULT NULL, company VARCHAR(250) DEFAULT NULL, department VARCHAR(250) DEFAULT NULL,country VARCHAR(50) DEFAULT NULL, ismale SMALLINT DEFAULT 0,intaddedby BIGINT DEFAULT 0,dateadded DATE DEFAULT NULL,inttype SMALLINT DEFAULT 0, reserve1 VARCHAR(500) DEFAULT NULL,reserve2 VARCHAR(500) DEFAULT NULL,PRIMARY KEY  (ids))
94: CREATE TRIGGER contacts_indexer1 AFTER INSERT ON contacts REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids, 'contacts',newdata.ids,newdata.cnumber||' '||newdata.taxnumber||' '||newdata.title||' '||newdata.country||' '|| newdata.prename||' '|| newdata.cname||' '|| newdata.street||' '||newdata.zip||' '|| newdata.city ||' '||newdata.mainphone||' '||newdata.fax||' '||newdata.mobilephone||' '||newdata.workphone||' '||newdata.mailaddress||' '||newdata.company||' '|| newdata.department||' '||newdata.website||' '||newdata.notes)
95: CREATE TRIGGER contacts_indexer2 AFTER UPDATE ON contacts REFERENCING NEW AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'contacts' AND  rowid = newdata.ids
96: CREATE TRIGGER contacts_indexer3 AFTER UPDATE ON contacts REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'contacts',newdata.ids,newdata.cnumber||' '||newdata.taxnumber||' '||newdata.title||' '||newdata.country||' '|| newdata.prename||' '|| newdata.cname||' '|| newdata.street||' '||newdata.zip||' '|| newdata.city ||' '||newdata.mainphone||' '||newdata.fax||' '||newdata.mobilephone||' '||newdata.workphone||' '||newdata.mailaddress||' '||newdata.company||' '|| newdata.department||' '||newdata.website||' '||newdata.notes)
97: CREATE TRIGGER contacts_indexer4 AFTER DELETE ON contacts REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'contacts' AND  rowid = newdata.ids
98: CREATE TRIGGER contacts_trash1   AFTER UPDATE ON contacts REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO trashbin (deleteme, cname, rowid, description) VALUES (newdata.invisible,'contacts',newdata.ids,newdata.cnumber||' ('|| newdata.cname||')')
99: CREATE TRIGGER contacts_trash2 AFTER DELETE ON contacts REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM trashbin WHERE cname = 'contacts' AND  rowid = newdata.ids
100: CREATE TRIGGER filestocontacts_indexer1 AFTER INSERT ON filestocontacts REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'filestocontacts',newdata.ids,newdata.cname||' '||newdata.description||' '||newdata.filename)
101: CREATE TRIGGER filestocontacts_indexer2 AFTER UPDATE ON filestocontacts REFERENCING NEW AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'filestocontacts' AND  rowid = newdata.ids
102: CREATE TRIGGER filestocontacts_indexer3 AFTER UPDATE ON filestocontacts REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'filestocontacts',newdata.ids,newdata.cname||' '||newdata.description||' '||newdata.filename)
103: CREATE TRIGGER filestocontacts_indexer4 AFTER DELETE ON filestocontacts REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'filestocontacts' AND  rowid = newdata.ids
104: CREATE TRIGGER groups_indexer1 AFTER INSERT ON groups REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'groups',newdata.ids,newdata.cname||' '||newdata.description||' '||newdata.dateadded)
105: CREATE TRIGGER groups_indexer2 AFTER UPDATE ON groups REFERENCING NEW AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'groups' AND  rowid = newdata.ids
106: CREATE TRIGGER groups_indexer3 AFTER UPDATE ON groups REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'groups',newdata.ids,newdata.cname||' '||newdata.description||' '||newdata.dateadded)
107: CREATE TRIGGER groups_indexer4 AFTER DELETE ON groups REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'groups' AND  rowid = newdata.ids
108: CREATE TRIGGER items_indexer1 AFTER INSERT ON items REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'items',newdata.ids,newdata.cname||' '||newdata.dateadded)
109: CREATE TRIGGER items_indexer2 AFTER UPDATE ON items REFERENCING NEW AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'items' AND  rowid = newdata.ids
110: CREATE TRIGGER items_indexer3 AFTER UPDATE ON items REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'items',newdata.ids,newdata.cname||' '||newdata.dateadded)
111: CREATE TRIGGER items_indexer4 AFTER DELETE ON items REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'items' AND  rowid = newdata.ids
112: CREATE TRIGGER items_trash2 AFTER DELETE ON items REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM trashbin WHERE cname = 'items' AND  rowid = newdata.ids
113: CREATE TRIGGER items_trash1 AFTER UPDATE ON items REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO trashbin (deleteme, cname, rowid, description) VALUES (newdata.invisible,'items',newdata.ids,newdata.cname)
114: CREATE TRIGGER subitems_indexer1 AFTER INSERT ON subitems REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'subitems',newdata.ids,newdata.cname||' '||newdata.description||' '||newdata.dateadded)
115: CREATE TRIGGER subitems_indexer2 AFTER UPDATE ON subitems REFERENCING NEW AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'subitems' AND  rowid = newdata.ids
116: CREATE TRIGGER subitems_indexer3 AFTER UPDATE ON subitems REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'subitems',newdata.ids,newdata.cname||' '||newdata.description||' '||newdata.dateadded)
117: CREATE TRIGGER subitems_indexer4 AFTER DELETE ON subitems REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'subitems' AND  rowid = newdata.ids
118: CREATE TRIGGER products_indexer1 AFTER INSERT ON products REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'products',newdata.ids,newdata.cname||' '||newdata.cnumber||' '||newdata.description||' '||newdata.dateadded)
119: CREATE TRIGGER products_indexer2 AFTER UPDATE ON products REFERENCING NEW AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'products' AND  rowid = newdata.ids
120: CREATE TRIGGER products_indexer3 AFTER UPDATE ON products REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO searchindex  (groupsids, dbidentity, rowid, text) VALUES (newdata.groupsids,'products',newdata.ids,newdata.cname||' '||newdata.cnumber||' '||newdata.description||' '||newdata.dateadded)
121: CREATE TRIGGER products_indexer4 AFTER DELETE ON products REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM searchindex WHERE dbidentity = 'products' AND  rowid = newdata.ids
122: CREATE TRIGGER products_trash1 AFTER UPDATE ON products REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO trashbin (deleteme, cname, rowid, description) VALUES (newdata.invisible, 'products',newdata.ids,newdata.cnumber||' ('|| newdata.cname||')')
123: CREATE TRIGGER messages_trash1 AFTER UPDATE ON messages REFERENCING NEW AS newdata FOR EACH ROW INSERT INTO trashbin (deleteme, cname, rowid, description) VALUES (newdata.invisible, 'messages',newdata.ids,' ('|| newdata.cname||')')
124: CREATE TRIGGER messages_trash2 AFTER DELETE ON messages REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM trashbin WHERE cname = 'messages' AND  rowid = newdata.ids
125: CREATE TRIGGER products_trash2 AFTER DELETE ON products REFERENCING OLD AS newdata FOR EACH ROW DELETE FROM trashbin WHERE cname = 'products' AND  rowid = newdata.ids
126: CREATE TRIGGER thrash_handler1 AFTER INSERT ON trashbin FOR EACH STATEMENT DELETE FROM trashbin WHERE deleteme = 0
127: CREATE TRIGGER thrash_handler2 AFTER INSERT ON trashbin FOR EACH STATEMENT DELETE FROM trashbin WHERE ids IN (SELECT ids FROM trashbin WHERE EXISTS( SELECT ids FROM trashbin AS tmptable WHERE trashbin.cname = tmptable.cname AND trashbin.rowid = tmptable.rowid HAVING trashbin.ids < MAX(tmptable.ids) ) )
128: INSERT INTO tax(cname, dateadded, identifier) VALUES ('Default 0%', '2009-04-03 09:31:33', 'Default 0%')
129: INSERT INTO tax(cname, dateadded, identifier, taxvalue) VALUES ('Default 19%', '2009-04-03 09:31:33', 'Default 19%', 19.0)
130: INSERT INTO tax(cname, dateadded, identifier, taxvalue) VALUES ('Default 7%', '2009-04-03 09:31:33', 'Default 7%', 7.0)
131: INSERT INTO groups (cname,description, dateadded) VALUES ('All Groups','This group is visible to everyone.', '2009-04-03 09:31:33')
132: INSERT INTO productgroups (cname,description, dateadded) VALUES ('All Products','This product group is visible to everyone.', '2009-04-03 09:31:33')
133: INSERT INTO accounts (cname,description, dateadded, taxvalue, intaccounttype, frame, intprofitfid, inttaxfid, inttaxuid) VALUES ('All Accounts','This account is the parent account of all account frames.', '2009-04-03 09:31:33', 0.0, 0, 'builtin',0,0,0)
134: INSERT INTO users (fullname,password,cname,laf,locale,mail,language,inthighestright,datelastlog,isenabled, dateadded ) VALUES ('Administrator','5f4dcc3b5aa765d61d8327deb882cf99','admin','javax.swing.plaf.metal.MetalLookAndFeel','en_GB','','buildin_en',0,'2009-04-03 09:31:33',1,'2009-04-03 09:31:33')
135: INSERT INTO countries (iso, cname ) VALUES (276,'Deutschland')
136: INSERT INTO globalsettings (cname, groupsids, value ) VALUES ('yabs_dbversion', 1, '1.0')
137: mpv5.globals.LocalSettings: Changing property 'cachedir' to: /home/anti/.yabs/Cache
138: mpv5.data.PropertyStore: Adding property: cachedir = /home/anti/.yabs/Cache
139: mpv5.utils.xml.XMLWriter: Updating /home/anti/.yabs/settings1.yabs
140: mpv5.data.PropertyStore: Adding property: lastuser = 1
141: mpv5.data.PropertyStore: Adding property: lastuserpw = 5F4DCC3B5AA765D61D8327DEB882CF99
142: mpv5.Main: Checking for auto login.. 
143: mpv5.db.common.QueryHandler: Checking database version..
144: mpv5.db.common.QueryHandler: Database version found: 1.0
145: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM users WHERE users.ids = 1 AND users.IDS>0
146: mpv5.db.common.DatabaseObject: Preparing to explode rows: 1
147: mpv5.Main: Trying to login user: admin
148: mpv5.db.common.QueryHandler: DELETE FROM tablelock WHERE tablelock.usersids = 1
149: mpv5.data.PropertyStore: Adding property: defaultfont = Tahoma
150: mpv5.usermanagement.Lock: Frame is not visible, can not be unlocked.
151: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM users WHERE users.IDS>0
152: mpv5.db.common.DatabaseObject: Preparing to explode rows: 1
153: mpv5.db.common.DatabaseObject: Rows found: 1
154: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT iso,cname FROM countries WHERE countries.IDS>0
155: mpv5.i18n.LanguageManager: Cached countries: 1
156: mpv5.data.PropertyStore: Adding property: oootremoteserver = false
157: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT cname, usersids, itemsids FROM favourites  WHERE favourites.usersids = 1 AND favourites.IDS>0
158: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM pluginstousers  WHERE usersids=1 AND pluginstousers.IDS>0
159: mpv5.db.common.DatabaseObject: Rows found: 0
160: mpv5.data.PropertyStore: Adding property: ooohome = /opt/openoffice.org3
161: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT cname, value FROM userproperties  WHERE userproperties.usersids=1 AND userproperties.IDS>0
162: mpv5.db.common.DatabaseObject: Removing from cache: users@1
163: mpv5.db.objects.User: Updating dataset: 1 within context 'USERS'
164: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getCName()
165: mpv5.db.objects.User: Collect: java.lang.String : __getCName ? admin
166: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getPassword()
167: mpv5.db.objects.User: Collect: java.lang.String : __getPassword ? 5f4dcc3b5aa765d61d8327deb882cf99
168: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getLaf()
169: mpv5.db.objects.User: Collect: java.lang.String : __getLaf ? javax.swing.plaf.metal.MetalLookAndFeel
170: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getLocale()
171: mpv5.db.objects.User: Collect: java.lang.String : __getLocale ? en_GB
172: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getMail()
173: mpv5.db.objects.User: Collect: java.lang.String : __getMail ? 
174: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getLanguage()
175: mpv5.db.objects.User: Collect: java.lang.String : __getLanguage ? buildin_en
176: mpv5.db.objects.User: Calling: public boolean mpv5.db.objects.User.__getIsenabled()
177: mpv5.db.objects.User: Collect: java.lang.Boolean : __getIsenabled ? true
178: mpv5.db.objects.User: Calling: public java.util.Date mpv5.db.objects.User.__getDatelastlog()
179: mpv5.db.objects.User: Collect: java.util.Date : __getDatelastlog ? Sun Aug 16 18:18:43 CEST 2009
180: mpv5.db.objects.User: Calling: public boolean mpv5.db.objects.User.__getIsloggedin()
181: mpv5.db.objects.User: Collect: java.lang.Boolean : __getIsloggedin ? true
182: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getFullname()
183: mpv5.db.objects.User: Collect: java.lang.String : __getFullname ? Administrator
184: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getDefcountry()
185: mpv5.db.objects.User: Collect: java.lang.String : __getDefcountry ? 
186: mpv5.db.objects.User: Calling: public boolean mpv5.db.objects.User.__getIsrgrouped()
187: mpv5.db.objects.User: Collect: java.lang.Boolean : __getIsrgrouped ? false
188: mpv5.db.objects.User: Calling: public int mpv5.db.objects.User.__getInthighestright()
189: mpv5.db.objects.User: Collect: java.lang.Integer : __getInthighestright ? 0
190: mpv5.db.objects.User: Calling: public int mpv5.db.objects.User.__getIntdefaultaccount()
191: mpv5.db.objects.User: Collect: java.lang.Integer : __getIntdefaultaccount ? 1
192: mpv5.db.objects.User: Calling: public int mpv5.db.objects.User.__getIntdefaultstatus()
193: mpv5.db.objects.User: Collect: java.lang.Integer : __getIntdefaultstatus ? 1
194: mpv5.db.objects.User: Calling: public int mpv5.db.objects.User.__getCompsids()
195: mpv5.db.objects.User: Collect: java.lang.Integer : __getCompsids ? 0
196: mpv5.db.objects.User: Calling: public int mpv5.db.common.DatabaseObject.__getGroupsids()
197: mpv5.db.objects.User: Collect: java.lang.Integer : __getGroupsids ? 1
198: mpv5.db.objects.User: Calling: public java.util.Date mpv5.db.common.DatabaseObject.__getDateadded()
199: mpv5.db.objects.User: Collect: java.sql.Date : __getDateadded ? 2009-04-03
200: mpv5.db.objects.User: Calling: public int mpv5.db.common.DatabaseObject.__getIntaddedby()
201: mpv5.db.objects.User: Collect: java.lang.Integer : __getIntaddedby ? 0
202: mpv5.db.common.QueryHandler: freeUpdateQuery::UPDATE users SET mail = '', isrgrouped = 0, inthighestright = 0, compsids = 0, locale = 'en_GB', intdefaultstatus = 1, datelastlog = '2009-08-16 18:18:43', password = '5f4dcc3b5aa765d61d8327deb882cf99', intaddedby = 0, laf = 'javax.swing.plaf.metal.MetalLookAndFeel', isenabled = 1, intdefaultaccount = 1, defcountry = '', groupsids = 1, language = 'buildin_en', isloggedin = 1, cname = 'admin', fullname = 'Administrator' WHERE users.ids = 1
203: mpv5.data.PropertyStore: Adding property: cachesize = 100
204: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
205: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM contacts WHERE contacts.IDS>0 AND invisible = 0 
206: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: CONTACTS
208: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM favourites WHERE favourites.IDS>0
207: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
209: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: FAVOURITES
210: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
211: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM users WHERE users.IDS>0
212: mpv5.db.common.DatabaseObject: Preparing to explode rows: 1
213: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
214: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM addresses WHERE addresses.IDS>0
215: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: ADDRESSES
216: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
217: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM items WHERE items.IDS>0 AND invisible = 0 
218: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: ITEMS
219: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
220: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM subitems WHERE subitems.IDS>0
221: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: SUBITEMS
222: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
223: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM groups WHERE groups.IDS>0
224: mpv5.db.common.DatabaseObject: Preparing to explode rows: 1
225: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
226: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM schedule WHERE schedule.IDS>0 AND invisible = 0 
227: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: SCHEDULE
228: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
229: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM filestocontacts WHERE filestocontacts.IDS>0
230: mpv5.db.common.QueryHandler: DELETE FROM tablelock WHERE tablelock.usersids = 1
231: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
232: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: FILESTOCONTACTS
233: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM filestoitems WHERE filestoitems.IDS>0
234: mpv5.data.PropertyStore: Adding property: nodeid = 1
235: mpv5.utils.xml.XMLWriter: Updating /home/anti/.yabs/settings1.yabs
236: mpv5.db.common.QueryHandler: DELETE FROM tablelock WHERE tablelock.usersids = 1
237: mpv5.db.common.DatabaseObject: Removing from cache: users@1
238: mpv5.db.objects.User: Updating dataset: 1 within context 'USERS'
239: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getCName()
240: mpv5.db.objects.User: Collect: java.lang.String : __getCName ? admin
241: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getPassword()
242: mpv5.db.objects.User: Collect: java.lang.String : __getPassword ? 5f4dcc3b5aa765d61d8327deb882cf99
243: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getLaf()
244: mpv5.db.objects.User: Collect: java.lang.String : __getLaf ? javax.swing.plaf.metal.MetalLookAndFeel
245: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getLocale()
247: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getMail()
248: mpv5.db.objects.User: Collect: java.lang.String : __getMail ? 
249: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getLanguage()
246: mpv5.db.objects.User: Collect: java.lang.String : __getLocale ? en_GB
250: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: FILESTOITEMS
251: mpv5.db.objects.User: Collect: java.lang.String : __getLanguage ? buildin_en
252: mpv5.db.objects.User: Calling: public boolean mpv5.db.objects.User.__getIsenabled()
253: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
254: mpv5.db.objects.User: Collect: java.lang.Boolean : __getIsenabled ? true
255: mpv5.db.objects.User: Calling: public java.util.Date mpv5.db.objects.User.__getDatelastlog()
256: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM products WHERE products.IDS>0 AND invisible = 0 
257: mpv5.db.objects.User: Collect: java.util.Date : __getDatelastlog ? Sun Aug 16 18:18:43 CEST 2009
258: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: PRODUCTS
259: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
260: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM accounts WHERE accounts.IDS>0
261: mpv5.db.objects.User: Calling: public boolean mpv5.db.objects.User.__getIsloggedin()
262: mpv5.db.objects.User: Collect: java.lang.Boolean : __getIsloggedin ? false
263: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getFullname()
264: mpv5.db.objects.User: Collect: java.lang.String : __getFullname ? Administrator
265: mpv5.db.objects.User: Calling: public java.lang.String mpv5.db.objects.User.__getDefcountry()
266: mpv5.db.objects.User: Collect: java.lang.String : __getDefcountry ? 
267: mpv5.db.objects.User: Calling: public boolean mpv5.db.objects.User.__getIsrgrouped()
268: mpv5.db.common.DatabaseObject: Preparing to explode rows: 1
269: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
270: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM messages WHERE messages.IDS>0 AND invisible = 0 
271: mpv5.db.objects.User: Collect: java.lang.Boolean : __getIsrgrouped ? false
272: mpv5.db.objects.User: Calling: public int mpv5.db.objects.User.__getInthighestright()
273: mpv5.db.objects.User: Collect: java.lang.Integer : __getInthighestright ? 0
274: mpv5.db.objects.User: Calling: public int mpv5.db.objects.User.__getIntdefaultaccount()
275: mpv5.db.objects.User: Collect: java.lang.Integer : __getIntdefaultaccount ? 1
276: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: MESSAGES
277: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
278: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM itemslists WHERE itemslists.IDS>0 AND invisible = 0 
279: mpv5.db.objects.User: Calling: public int mpv5.db.objects.User.__getIntdefaultstatus()
280: mpv5.db.objects.User: Collect: java.lang.Integer : __getIntdefaultstatus ? 1
281: mpv5.db.objects.User: Calling: public int mpv5.db.objects.User.__getCompsids()
282: mpv5.db.objects.User: Collect: java.lang.Integer : __getCompsids ? 0
283: mpv5.db.objects.User: Calling: public int mpv5.db.common.DatabaseObject.__getGroupsids()
284: mpv5.db.objects.User: Collect: java.lang.Integer : __getGroupsids ? 1
285: mpv5.db.objects.User: Calling: public java.util.Date mpv5.db.common.DatabaseObject.__getDateadded()
286: mpv5.db.objects.User: Collect: java.sql.Date : __getDateadded ? 2009-04-03
287: mpv5.db.objects.User: Calling: public int mpv5.db.common.DatabaseObject.__getIntaddedby()
288: mpv5.db.objects.User: Collect: java.lang.Integer : __getIntaddedby ? 0
289: mpv5.db.common.QueryHandler: freeUpdateQuery::UPDATE users SET mail = '', isrgrouped = 0, inthighestright = 0, compsids = 0, locale = 'en_GB', intdefaultstatus = 1, datelastlog = '2009-08-16 18:18:43', password = '5f4dcc3b5aa765d61d8327deb882cf99', intaddedby = 0, laf = 'javax.swing.plaf.metal.MetalLookAndFeel', isenabled = 1, intdefaultaccount = 1, defcountry = '', groupsids = 1, language = 'buildin_en', isloggedin = 0, cname = 'admin', fullname = 'Administrator' WHERE users.ids = 1
290: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: ITEMSLISTS
291: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
292: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM comps WHERE comps.IDS>0
293: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: COMPS
294: mpv5.db.common.QueryHandler: Setting row limit for this connection to: 100
295: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM webshops WHERE webshops.IDS>0
296: mpv5.db.common.DatabaseObject: Sorry, but there was no matching data in the database. in Context: WEBSHOPS
297: mpv5.db.common.DatabaseObject: Cached objects: 3
298: mpv5.db.common.QueryHandler: freeSelectQuery::SELECT * FROM webshops WHERE webshops.IDS>0
299: mpv5.db.common.QueryHandler: Database statistics:
300: mpv5.webshopinterface.WSIManager: Sorry, but there was no matching data in the database. in Context: WEBSHOPS
301: mpv5.webshopinterface.WSIManager: Initiating WebShop clients..
302: mpv5.Main: Count: 1 for query: SELECT * FROM itemslists WHERE itemslists.IDS>0 AND invisible = 0 
Count: 1 for query: SELECT * FROM products WHERE products.IDS>0 AND invisible = 0 
Count: 1 for query: SELECT * FROM filestoitems WHERE filestoitems.IDS>0
Count: 1 for query: SELECT * FROM groups WHERE groups.IDS>0
Count: 1 for query: SELECT * FROM filestocontacts WHERE filestocontacts.IDS>0
Count: 1 for query: SELECT * FROM contacts WHERE contacts.IDS>0 AND invisible = 0 
Count: 1 for query: UPDATE users SET mail = '', isrgrouped = 0, inthighestright = 0, compsids = 0, locale = 'en_GB', intdefaultstatus = 1, datelastlog = '2009-08-16 18:18:43', password = '5f4dcc3b5aa765d61d8327deb882cf99', intaddedby = 0, laf = 'javax.swing.plaf.metal.MetalLookAndFeel', isenabled = 1, intdefaultaccount = 1, defcountry = '', groupsids = 1, language = 'buildin_en', isloggedin = 1, cname = 'admin', fullname = 'Administrator' WHERE users.ids = 1
Count: 1 for query: SELECT * FROM users WHERE users.ids = 1 AND users.IDS>0
Count: 1 for query: SELECT cname, usersids, itemsids FROM favourites  WHERE favourites.usersids = 1 AND favourites.IDS>0
Count: 1 for query: SELECT cname, value FROM userproperties  WHERE userproperties.usersids=1 AND userproperties.IDS>0
Count: 1 for query: SELECT * FROM pluginstousers  WHERE usersids=1 AND pluginstousers.IDS>0
Count: 1 for query: SELECT * FROM favourites WHERE favourites.IDS>0
Count: 1 for query: SELECT * FROM accounts WHERE accounts.IDS>0
Count: 1 for query: SELECT * FROM items WHERE items.IDS>0 AND invisible = 0 
Count: 1 for query: SELECT * FROM subitems WHERE subitems.IDS>0
Count: 1 for query: SELECT * FROM schedule WHERE schedule.IDS>0 AND invisible = 0 
Count: 1 for query: SELECT * FROM comps WHERE comps.IDS>0
Count: 1 for query: SELECT * FROM messages WHERE messages.IDS>0 AND invisible = 0 
Count: 1 for query: UPDATE users SET mail = '', isrgrouped = 0, inthighestright = 0, compsids = 0, locale = 'en_GB', intdefaultstatus = 1, datelastlog = '2009-08-16 18:18:43', password = '5f4dcc3b5aa765d61d8327deb882cf99', intaddedby = 0, laf = 'javax.swing.plaf.metal.MetalLookAndFeel', isenabled = 1, intdefaultaccount = 1, defcountry = '', groupsids = 1, language = 'buildin_en', isloggedin = 0, cname = 'admin', fullname = 'Administrator' WHERE users.ids = 1
Count: 1 for query: SELECT * FROM addresses WHERE addresses.IDS>0
Count: 1 for query: SELECT iso,cname FROM countries WHERE countries.IDS>0
Count: 2 for query: SELECT * FROM webshops WHERE webshops.IDS>0
Count: 2 for query: SELECT * FROM users WHERE users.IDS>0
Count: 3 for query: DELETE FROM tablelock WHERE tablelock.usersids = 1

303: So Long, and Thanks for All the Fish.
304: mpv5.webshopinterface.WSIManager: Done with initiating WebShop clients.
305: mpv5.utils.files.FileReaderWriter: /home/anti/.yabs/.Yabs-Yabs-1.0-alpha-1.lck (No such file or directory)