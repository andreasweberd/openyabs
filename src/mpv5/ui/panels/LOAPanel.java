/*
 *      This is free software: you can redistribute it and/or modify
 *      it under the terms of the GNU Lesser General Public License Version 2.1 as published by
 *      the Free Software Foundation, either version 2.1 of the License, or
 *      (at your option) any later version.
 *
 *      This is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *      GNU Lesser General Public License Version 2.1 for more details.
 *
 *      You should have received a copy of the GNU Lesser General Public License Version 2.1
 *      along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package mpv5.ui.panels;

import ag.ion.bion.officelayer.NativeView;
import ag.ion.bion.officelayer.desktop.IFrame;
import ag.ion.bion.officelayer.document.DocumentDescriptor;
import ag.ion.bion.officelayer.document.IDocument;
import ag.ion.bion.officelayer.text.ITextDocument;
import enoa.connection.NoaConnection;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import mpv5.YabsViewProxy;
import mpv5.logging.Log;

/**
 *
 * @author andreas
 */
public final class LOAPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private IFrame officeFrame;
    private IDocument xdocument;

    /**
     * Creates new form LOAPanel
     *
     * @param file
     */
    public void loadODT(final File file){
        Log.Debug(this, "Opening " + file + " in internal LO");
        Runnable runnable = new Runnable() {

            public void run() {
                try {
                    initComponents();
                    setVisible(true);
                    constructNOAFrame();
                    fillNOAPanel(new FileInputStream(file));
                } catch (Throwable ex) {
                    Log.Debug(ex);
                }
            }
        };
        new Thread(runnable).start();
    }

    /**
     *
     */
    public LOAPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void constructNOAFrame() throws Throwable {
        
        final Container panel = this;
        panel.add(new JLabel("hallo"), BorderLayout.EAST);
        NoaConnection.definePath();
        final NativeView nativeView = new NativeView();
        panel.add(nativeView, BorderLayout.CENTER);
        nativeView.setPreferredSize(new Dimension(panel.getWidth() - 5, panel.getHeight() - 5));
        panel.getLayout().layoutContainer(panel);
        officeFrame = NoaConnection.getConnection().getDesktopService().constructNewOfficeFrame(nativeView);
        panel.validate();
    }

    /**
     * Opens a file
     *
     * @param file
     */
    public void fillNOAPanel(InputStream file) {
        try {
            xdocument = NoaConnection.getConnection().getDocumentService().loadDocument(officeFrame,
                    file,
                    DocumentDescriptor.DEFAULT);
            validate();
        } catch (Throwable throwable) {
            add(new JLabel("An error occured while creating the NOA panel: " + throwable.getMessage()), BorderLayout.CENTER);
            Log.Debug(throwable);
        }
    }
}
