/*
 * Kundes.java
 *
 * Created on 28. Dezember 2007, 19:17
 */
package mp4.panels.misc;

import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
//import mp3.classes.objects.ungrouped.HistoryHandler;
import javax.swing.table.DefaultTableModel;
import mp4.globals.Constants;

import mp4.globals.Strings;

import mp4.logs.*;
import mp4.items.visual.Popup;
import mp4.datenbank.verbindung.ConnectionHandler;
//import mp3.classes.objects.ungrouped.History;
//import mp3.classes.objects.ungrouped.MyData;
import mp4.datenbank.verbindung.ConnectionTypeHandler;
import mp4.utils.files.FileDirectoryHandler;

import mp4.utils.files.UnZip;
import mp4.utils.files.Zip;
import mp4.frames.mainframe;
import mp4.einstellungen.Einstellungen;
import mp4.items.HistoryItem;
import mp4.main.Main;
import mp4.utils.listen.ListenDataUtils;
import mp4.utils.tabellen.TableFormat;

/**
 *
 * @author  anti43
 */
public class backupView extends mp4.items.visual.CommonPanel{

    private String[][] liste;
    private String[] header;
    private mainframe mainframe;
    private Thread t;
    private String savepath;
    private ArrayList lstFiles;
    private File src;
    private Einstellungen l;
    private SimpleDateFormat df;
    private SimpleDateFormat df2;
    private ArrayList list;

    /** Creates new form Kundes
     * @param aThis 
     */
    public backupView(mainframe aThis) {
        initComponents();
        mainframe = aThis;
        l = Einstellungen.instanceOf();
        header = new String[]{"id", "Datum", "Datei"};
        jTextField1.setText(l.getBackup_Verzeichnis());
        this.savepath = l.getBackup_Verzeichnis();
        df = new SimpleDateFormat("dd-MM-yyyy-HH-mm-ss");
        df2 = new SimpleDateFormat("dd. MMMMMMMM yyyy HH:mm:ss");
        this.validateTable();

    }

    private JTable getJTable1() {
        return jTable1;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bilder/3232/filesave.png"))); // NOI18N
        jButton6.setToolTipText("Sicherung anlegen");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });
        jToolBar1.add(jButton6);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bilder/3232/agt_reload.png"))); // NOI18N
        jButton7.setToolTipText("Sicherung zurückspielen");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel2.setBackground(new java.awt.Color(227, 219, 202));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Verfügbare Sicherungsdateien:");

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Datum", "Datei"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("Pfad:");

        jTextField1.setEditable(false);

        jButton3.setText("wählen..");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jButton3)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void saving() {
        if (ConnectionTypeHandler.isInSingleUserMode()) {
            String store, path;
            String savefile;

            try {
                path = Main.MPPATH + File.separator + Constants.DATABASENAME;
                store = l.getBackup_Verzeichnis();
                savefile = store + File.separator + df.format(new Date()) + ".mpsavefile-40.zip";

                if (store.equals("")) {
                    store = Main.MPPATH + File.separator + Constants.DATABASENAME;
                }

                Log.Debug(this, "Anlegen einer Sicherungsdatei:\nZiel: " + savefile, true);
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                Zip.zip(path, savefile);
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                mainframe.setMessage("Sicherungsdatei '" + savefile + "' angelegt.");
                new HistoryItem(ConnectionHandler.instanceOf(), Strings.BACKUP, "Sicherungsdatei " + savefile + " angelegt.");
            } catch (Exception ex) {
                Log.Debug(this, ex.getMessage(), true);
            }
            this.validateTable();
        } else {
            Popup.notice(this, "Datenbankbackup ist nur mit lokaler Derby Datenbank möglich.");
        }
    }

    private void setSavePath(String path) {
        this.savepath = path;
        validateTable();
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            jTextField1.setText(fc.getSelectedFile().toString());
            setSavePath(fc.getSelectedFile().toString());
        }
        l.setBackup_Verzeichnis(jTextField1.getText());
        l = Einstellungen.instanceOf();
        mainframe.setMessage("Sicherungspfad '" + l.getBackup_Verzeichnis() + "' editiert.");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        saving();
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked

        boolean idOk = true;
        Integer id = 0;
        try {
            id = Integer.valueOf((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0));
        } catch (Exception numberFormatException) {
            idOk = false;
            Popup.notice(this, "Sie müssen eine Sicherungsdatei auswählen.");
        }
        File path;
        String store = "";
        if (idOk) {
            if ((JOptionPane.showConfirmDialog(this, "Möglicherweise vorhandene neuere Daten,\n " +
                    "die Sie seit der Sicherung angelegt haben, werden gelöscht!\n " +
                    "Vor dem Ersetzen wird eine Sicherheitskopie des aktuellen Datenbestandes angelegt.\n " +
                    "Wollen Sie wirklich die Sicherungsdatei vom * " + ((String[])list.get(id))[1] + " * zurückspielen?",
                    "Sicher?", JOptionPane.YES_NO_OPTION)) == JOptionPane.YES_OPTION) {
                jButton6MouseClicked(evt);
                try {
                    File olddb = new File(Main.MPPATH + File.separator + Constants.DATABASENAME);
                    store = Main.MPPATH + File.separator + Constants.DATABASENAME;
                    Log.Debug(this,"Zurückspielen einer Sicherungsdatei:\nZiel: " + store, true);
                    FileDirectoryHandler.deleteTree(olddb);
                    Log.Debug(this,"Rücksichern nach: " + store, true);
                    UnZip.deflate(((String[])list.get(id))[2], store);
                    mainframe.setMessage("Sicherungsdatei '" + ((String[])list.get(id))[2] + "' wiederhergestellt.");
                    Popup.notice(this, "Starten Sie das Programm neu.");
                    System.exit(0);

                } catch (IOException ex) {
                    Log.Debug(this,ex.getMessage(), true);
                }
            }
        }
    }//GEN-LAST:event_jButton7MouseClicked
    /**
     * 
     * @param current
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton3;
    public javax.swing.JButton jButton6;
    public javax.swing.JButton jButton7;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JTextField jTextField1;
    public javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    @SuppressWarnings("unchecked")
    private void validateTable() {
        try {
            this.lstFiles = new ArrayList();
            this.src = new File(this.savepath);
            Log.Debug(this,"Backup Verzeichnis: " + src, true);
            File[] files = src.listFiles();
            Log.Debug(this,"Dateien analysieren...", true);
            list = new ArrayList();

            for (int i = 0,   k = 0; i < files.length; i++) {
                if (files[i].isFile() && files[i].toString().contains("mpsavefile-40")) {
                    try {
                        String[] fileinfo = new String[3];
                        fileinfo[0] = String.valueOf(k);
                        fileinfo[1] = df2.format(df.parse(files[i].getName().substring(0, 18)));
                        fileinfo[2] = files[i].getCanonicalPath();
                        list.add(fileinfo);
                        Log.Debug(this,"Sicherungsdatei gefunden: " + files[i].getName(), true);
                        k++;
                    } catch (Exception ex) {
                        Log.Debug(this,ex.getMessage(), true);
                    }
                }
            }
            if (files.length == 0) {
                String[] fileinfo = new String[3];
                fileinfo [2] = "Keine Datei vorhanden";
                list.add(fileinfo);
            }
        } catch (Exception exception) {
            Log.Debug(this,exception);
            Log.Debug(this,exception.getMessage(), true);
        }

        jTable1.setModel(new DefaultTableModel(ListenDataUtils.listToTableArray(list), header));
        TableFormat.stripFirst(jTable1);
        TableFormat.format(jTable1, 1, 180);
    }
        
}
