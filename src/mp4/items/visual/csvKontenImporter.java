/*
 * productImporter.java
 *
 * Created on 27. Januar 2008, 21:56
 */
package mp4.items.visual;

import com.Ostermiller.util.CSVParser;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

import mp4.globals.Strings;
import mp4.utils.ui.Position;

import mp4.logs.*;
import mp4.items.visual.Popup;
import mp4.datenbank.verbindung.ConnectionHandler;

import mp4.items.*;
import mp4.items.visual.*;
import mp4.items.ProductGroupFamily;
import mp4.items.ProductGroupGroup;
import mp4.items.Lieferant;
import mp4.utils.tabellen.models.DefaultHelpModel;
import org.supercsv.cellprocessor.constraint.StrMinMax;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;


/**
 *
 * @author  anti43
 */
public class csvKontenImporter extends javax.swing.JFrame {

    private static csvKontenImporter frame;

    static void instanceOf() {

        if (frame == null) {
            frame = new csvKontenImporter();
        }

        frame.setVisible(true);
    }
    private CSVParser p;
    private ArrayList liste;
    private String[][] datstr;
    private String[] header;
    public KontenImporteur[] data;
    public Lieferant supplier;
    private Task task;

    /** Creates new form productImporter */
    public csvKontenImporter() {
        initComponents();
        new Position(this);
        this.setVisible(rootPaneCheckingEnabled);

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MP CSV Import");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Import: Daten aus einer CSV -Datei"));

        jButton1.setText("Start");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Abbruch");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jTextField1.setText("Datei wählen!");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton3.setText("...");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jLabel2.setText("Trennzeichen:");

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Produknummer", "Produktname", "Langtext", "VK", "EK", "Mehrwertsteuer", "Herstellername", "Warengruppenkategorie", "Warengruppenfamilie", "Warengruppe", "Produktbild-URL", "EAN"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setText("Komma");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Semikolon");

        jButton4.setText("Daten übernehmen");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Produktimport: Wählen Sie eine CSV-Datei.");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jProgressBar1.setStringPainted(true);

        jButton6.setText("Hilfe");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked


        System.exit(1);

        this.dispose();
    }//GEN-LAST:event_jButton2MouseClicked

    @SuppressWarnings("unchecked")
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        boolean succ = true;
        KontenImporteur user = new KontenImporteur();
        liste = new ArrayList();
        header = new String[]{"Nummer", "Klasse", "Gruppe", "Art"
        };

        try {

            final CellProcessor[] processors = new CellProcessor[]{
                new StrMinMax(0, 49),
                new StrMinMax(0, 499),
                new StrMinMax(0, 499),
                new StrMinMax(0, 499),
              
            };


            CsvPreference pref = CsvPreference.STANDARD_PREFERENCE;
            if (jCheckBox2.isSelected()) {
                pref = CsvPreference.EXCEL_NORTH_EUROPE_PREFERENCE;
            }

            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));

            ICsvBeanReader inFile = new CsvBeanReader(new FileReader(jTextField1.getText()), pref);
            try {
//                final String[] header = inFile.getCSVHeader(true);


                while ((user = inFile.read(KontenImporteur.class, header, processors)) != null) {
                    liste.add(user);
                }


            } catch (Exception ex) {
                succ = false;
                new Popup(ex.getMessage(), Popup.ERROR);
                Log.Debug(this,ex);
               
         
               
            } finally {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                inFile.close();

            }

        } catch (Exception ex) {
            succ = false;
            new Popup(ex.getMessage(), Popup.ERROR);
             Log.Debug(this,ex);
        }

        try {
            user = new KontenImporteur();
            data = KontenImporteur.listToImporteurArray(liste);
            datstr = user.getData(data);
            
           

            jTable1.setModel(new DefaultTableModel(datstr, header));


        } catch (Exception ex) {
            succ = false;
            new Popup(ex.getMessage(), Popup.ERROR);
             Log.Debug(this,ex);
        }


        if (succ) {
            getJButton4().setEnabled(true);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
    
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            jTextField1.setText(fc.getSelectedFile().toString());
        }
        
    }//GEN-LAST:event_jButton3MouseClicked

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
    
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (jButton4.isEnabled()) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            //Instances of javax.swing.SwingWorker are not reusuable, so
            //we create new instances as needed.
            task = new Task(this);
//        task.addPropertyChangeListener(this);
            task.execute();

        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
       
        new Help(new DefaultHelpModel("CSV Import", 
                "<P><FONT FACE='DejaVu Sans, sans-serif'><FONT SIZE=3>Die zu "+
"importierenden Daten m&uuml;ssen in dieser Form vorliegen:</FONT></FONT></P>"+
"<P><FONT FACE='DejaVu Sans, sans-serif'><FONT SIZE=3>" +
                "Nummer, Kontenklasse, Kontengruppe, Kontenart</FONT></FONT></P>"
                
                ));
    }//GEN-LAST:event_jButton6ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JButton getJButton4() {
        return jButton4;
    }
    
    class Task extends SwingWorker<Void, Void> {

    private csvKontenImporter thisa;
    private ProductGroupCategory newcat;
    private ProductGroupFamily newfam;
    private ProductGroupGroup newgrp;
    private String fam;
    private String grp;
    /*
     * Main task. Executed in background thread.
     */

    public Task(csvKontenImporter thisa) {

        this.thisa = thisa;
    }

    public Void doInBackground() {
        int h = 0;
        SimpleDateFormat df = new SimpleDateFormat();
        String datum = df.format(new Date());
        String cat;
        boolean news=false;




        if ((JOptionPane.showConfirmDialog(thisa, "Wirklich alle Daten übernehmen? Dies wird möglicherweise einige Zeit dauern!", "Sicher?", JOptionPane.YES_NO_OPTION)) == JOptionPane.YES_OPTION) {

            if (thisa.data != null) {
                Date d=new Date();
//                Log.setLogLevel(Log.LOGLEVEL_LOW);
                Log.Debug(this,"Einlesen gestartet: " + d,true);
                thisa.setCursor(new Cursor(Cursor.WAIT_CURSOR));

                thisa.jProgressBar1.setMaximum(thisa.data.length);
                thisa.jProgressBar1.setMinimum(0);

                for (int i = 0; i < thisa.data.length; i++) {

                    
                    new mp4.items.SKRKonto(thisa.data[i].getNummer(),thisa.data[i].getKlasse(),thisa.data[i].getGruppe(),thisa.data[i].getArt());

                   
                    thisa.jProgressBar1.setValue(i);

                    thisa.jLabel1.setText(h + " Konten importiert.");
                   h++;
                }
                d=new Date();
                Log.Debug(this,"Einlesen beendet: " + d + " Konten: " + h,true);
                
                 new HistoryItem(ConnectionHandler.instanceOf(), Strings.KONTEN ,h + " Konten importiert.");
            
                
                 thisa.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                 thisa.getJButton4().setEnabled(false);
                 thisa.jProgressBar1.setValue(0);
                 thisa.setVisible(false);
            }

        }


        return null;
    }

    /*
     * Executed in event dispatching thread
     */
    @Override
    public void done() {
        Toolkit.getDefaultToolkit().beep();
        thisa.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }
    }

}
